// Initializes the starting state of the game board
// PRE: The state parameter must be of type GameState
// POST: The board member of state will be initialized to
Tile[][] InitBoard(GameState state, )
{
    board = state.board;

    for (int x = 0; x < state.boardSize; x++)
    {
        for (int y = 0; y < state.boardSize; y++)
        {
            Tile tile = board[x][y];
            // for now just make everything water I guess
            tile.status = '~';
            tile.type = water;
        }
    }

    return state.board[];
}

// Lets a player position their ships on their board
// Pre: state must contain a valid board member
// Post: Will update the correct tiles in the calling players board with the correct ship positions
tile[][] SetShips(GameState state)
{
    // prompt user to choose where to set first ship (carrier?)

    // prompt user to choose where to set second ship (battleship?)

    // prompt user to choose where to set third ship (crusier?)

    // prompt user to choose where to set fourth ship (submarine?)
    // prompt user to choose where to set second ship (destroyer?)

    // can either run this function twice for each players board, or can fill both boards at once.
}

// Simulates the actions necessary to run a turn for a player
// Pre: The players must have already placed their ships
// Post: will return the updated version of the gamestate after the turn has been run
GameState RunTurn(GameState state)
{
}

// Updates the game state at the end of every turn
// Pre: Must be called in the RunTurn function
// Post: will calculate the state of the board at the end of the turn and return it to the RunTurn function
GameState CalculateState(GameState state)
{
}