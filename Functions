// Initializes the starting state of the game board
// PRE: The state parameter must be of type GameState
// POST: The board member of state will be initialized to
Tile[][] InitBoard(GameState state, )
{
    board = state.board;

    for (int x = 0; x < state.boardSize; x++)
    {
        for (int y = 0; y < state.boardSize; y++)
        {
            Tile tile = board[x][y];
            // for now just make everything water I guess
            tile.status = '~';
            tile.type = water;
        }
    }

    return state.board[];
}

// Lets a player position their ships on their board
// Pre: state must contain a valid board member
// Post: Will update the correct tiles in the calling players board with the correct ship positions
tile[][] SetShips(GameState state)
{
    // prompt user to choose where to set first ship (carrier?)

    // prompt user to choose where to set second ship (battleship?)

    // prompt user to choose where to set third ship (crusier?)

    // prompt user to choose where to set fourth ship (submarine?)
    // prompt user to choose where to set second ship (destroyer?)

    // can either run this function twice for each players board, or can fill both boards at once.
}

// Simulates the actions necessary to run a turn for a player
// Pre: The players must have already placed their ships
// Post: will return the updated version of the gamestate after the turn has been run
GameState RunTurnPlayer(GameState state)
{
    // ask for input on what tile to fire on

    // check if tile contains an enemy ship

    // if tile contains enemy ship update game state and change tile graphic to indicate a hit
    // do this through update gameState
}

// Simulates the actions necessary to run a turn for a player
// Pre: The players must have already placed their ships
// Post: will return the updated version of the gamestate after the turn has been run
GameState RunTurnPlayer(GameState state)
{
    // ask for input on what tile to fire on

    // check if tile contains an enemy ship

    // if tile contains enemy ship update game state and change tile graphic to indicate a hit
    // do this through UpdateTileState
}
// Simulates the actions necessary to run a turn for an "ai"
// Pre: The ai must have already placed their ships
// Post: will return the updated version of the gamestate after the turn has been run
GameState RunTurnAi(GameState state)
{
    // pick a random tile to hit

    // check if tile contains an enemy ship

    // if tile contains enemy ship update game state and change tile graphic to indicate a hit
    // do this through update gameState
}

// Updates the state of a tile
// Pre: x and y must be within the bounds of the GameState.board array and tile must be a valid Tile type struct
// Post: Will update the state of the specified tile with the new state from the tile parameter
GameState UpdateTileState(Tile tile, int x, int y)
{
    //
}

// Initiates computer to create random ship placement
// Pre: Random number generator library call using computer timer
// Post: Random ship placement onto tile board

GameState RunGenerateAi(GameState state)
{
    int xCord, yCord;
    
    do {
    
        guessPosition = rand() & 100 + 1;
    
        guessPosition = state.board[];
    } while (!FindShip(board, state.boardsize, guessPosition, x, y));
    
    cout << "Find the ship placed by the computer " << guessPosition << "\n";
    
    do {
        UpdateTileState(board, int x, int y);
        
        cout << "Guess ship location ";
        cin << xCord << yCord;
        found = UpdateTileState(board, state.boardsize, guessPosition, xCord, yCord);
        
    }while (!found);
}
    
